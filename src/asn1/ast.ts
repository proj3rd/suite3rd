// This file is generated by tool/generateAst.js

import { Token } from "./token.js";

export class ModuleDefinition {
  public readonly tagDefault?: Token;
  public readonly imports?: SymbolsFromModule[];
  constructor(
    public readonly moduleName: Token,
    public readonly assignmentList: Object[],
    {
      tagDefault,
      imports,
    }: { tagDefault?: Token; imports?: SymbolsFromModule[] },
  ) {
    this.tagDefault = tagDefault;
    this.imports = imports;
  }
}

export class SymbolsFromModule {
  constructor(
    public readonly globalModuleReference: GlobalModuleReference,
    public readonly symbolList: Asn1Symbol[],
  ) {}
}

export class GlobalModuleReference {
  constructor(public readonly reference: Token) {}
}

export class Asn1Symbol {
  constructor(public readonly reference: Reference) {}
}

export class Reference {
  public readonly isParameterized?: Boolean;
  constructor(
    public readonly reference: Token,
    { isParameterized }: { isParameterized?: Boolean },
  ) {
    this.isParameterized = isParameterized;
  }
}

export class TypeAssignment {
  constructor(
    public readonly name: Token,
    public readonly type: Object,
  ) {}
}

export class ValueAssignment {
  constructor(
    public readonly name: Token,
    public readonly type: Object,
    public readonly value: Object,
  ) {}
}

export class NamedType {
  constructor(
    public readonly name: Token,
    public readonly type: Object,
  ) {}
}

export class BooleanType {
  constructor() {}
}

export class IntegerType {
  public readonly constraint?: Object;
  constructor({ constraint }: { constraint?: Object }) {
    this.constraint = constraint;
  }
}

export class EnumeratedType {
  public readonly exceptionSpec?: ExceptionSpec;
  public readonly additionalEnumeration?: EnumerationItem[];
  constructor(
    public readonly rootEnumeraiton: EnumerationItem[],
    {
      exceptionSpec,
      additionalEnumeration,
    }: {
      exceptionSpec?: ExceptionSpec;
      additionalEnumeration?: EnumerationItem[];
    },
  ) {
    this.exceptionSpec = exceptionSpec;
    this.additionalEnumeration = additionalEnumeration;
  }
}

export class EnumerationItem {
  public readonly value?: Object;
  constructor(
    public readonly name: Token,
    { value }: { value?: Object },
  ) {
    this.value = value;
  }
}

export class BitStringType {
  public readonly namedBitList?: NamedBit[];
  public readonly constraint?: Object;
  constructor({
    namedBitList,
    constraint,
  }: {
    namedBitList?: NamedBit[];
    constraint?: Object;
  }) {
    this.namedBitList = namedBitList;
    this.constraint = constraint;
  }
}

export class NamedBit {
  constructor(
    public readonly name: Token,
    public readonly value: Object,
  ) {}
}

export class OctetStringType {
  public readonly constraint?: Object;
  constructor({ constraint }: { constraint?: Object }) {
    this.constraint = constraint;
  }
}

export class NullType {
  constructor() {}
}

export class ExceptionSpec {
  constructor() {}
}
