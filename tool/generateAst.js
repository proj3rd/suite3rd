import { readFileSync, writeFileSync } from "fs";
import { resolve } from "path";
import { argv } from "node:process";
import { format } from "prettier";

async function main() {
  const dirname = (() => {
    const { pathname } = new URL(import.meta.url);
    const lastIndexOfSlash = pathname.lastIndexOf("/");
    return pathname.substring(0, lastIndexOfSlash);
  })();

  const [, , outDir] = argv;
  if (!outDir) {
    console.error("outDir is required");
    exit(-1);
  }

  await generateAst();

  async function generateAst() {
    const definitions = readFileSync(resolve(dirname, "astDefinition"), "utf8")
      .split("\n")
      .map((line) => line.trim())
      .filter(Boolean);
    const statements = [];
    statements.push("// This file is generated by tool/generateAst.js");
    for (const definition of definitions) {
      const [className, members] = definition
        .split(":")
        .map((part) => part.trim());
      const memberList = members
        .split(",")
        .map((member) => member.trim().split(" "));
      const mandatoryMemberList = memberList.filter(
        ([, name]) => !name.endsWith("?")
      );
      const mandatoryConstructorParams = mandatoryMemberList
        .map(([type, name]) => `public readonly ${name}: ${type}`)
        .join(", ");
      const optionalMemberList = memberList.filter(([, name]) =>
        name.endsWith("?")
      );
      const optionalConstructorParams = optionalMemberList
        .map(([, name]) => name.replace("?", ""))
        .join(",");
      const optionalConstructorParamTypes = optionalMemberList
        .map(([type, name]) => `${name}: ${type}`)
        .join(",");
      const constructorParamList = [];
      if (mandatoryMemberList.length > 0) {
        constructorParamList.push(mandatoryConstructorParams);
      }
      if (optionalMemberList.length > 0) {
        constructorParamList.push(
          `{${optionalConstructorParams}}:{${optionalConstructorParamTypes}}`
        );
      }
      const optionalAssignments = optionalMemberList
        .map(
          ([, name]) =>
            `this.${name.replace("?", "")} = ${name.replace("?", "")};`
        )
        .join("\n");
      const constructorParams = constructorParamList.join(",");
      const classDefinition = `export class ${className} {
        constructor(${constructorParams}){
            ${optionalAssignments}
        }
      }`;
      statements.push(classDefinition);
    }
    const output = statements.join("\n\n");
    const formatted = await format(output, {
      parser: "typescript",
    });
    writeFileSync(resolve(outDir, "ast.ts"), formatted);
  }
}

main();
